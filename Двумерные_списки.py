tmp = [[1, 2, 3], [4, 5], [9, 8, 7]]
# индексирование
# 0 [1, 2, 3]
# 1 [4, 5]
# 2 [9, 8, 7]

# print(tmp[0][0]) # обращаемся к 1 эмлементу и к 1 элементу внутри

tmp[1][0] = 9 # можно поменять элемент также по индексу
tmp[0] = [2, 3, 5, 9, 5] # можно изменить сам внутренний список

tmp.append([6, 9, 2]) # добавляет этаж, ещё один список

for i in tmp:
    print(i) # вывод столбцом все списки
    print(*i) # вывод только значения без скобок

n = int(input()) # задаём количество этажей (элементов 1-ого порядка)
tmp = [] # создаём пустой список
for i in range(n): # для каждого значения из элементов 1-ого порядка
    a = list(map(int, input().split())) # вводим через пробел элементы второго порядка, завёрнутые в список
    tmp.append(a) # добавляем список в список!

def pl(t): # задаём функцию вывода двумерного списка
    for i in t:
        print(*i)

tmp = [[1 for o in range(7)] for i in range(5)]
# делаем список 5Х7 = 5 этажей по 7 элементов равных 1

# ЗАДАЧКА
x = int(input()) # количество этажей
y = int(input()) # количество значений в этаже
house = [[0 for i in range(y)] for i in range(x)]
cnt = 1
for i in range(-1, -x - 1, -1): # идём от последнего этажа, в нашем случае снизу с шагом на этаж выше, тоесть минус 1
    if i % 2 == 1: # если этаж не чётный, номерация идёт слева-направо
        for j in range(y):
            house[i][j] = cnt # каждое последущее значение равно счётчику
            cnt += 1 # счётчик увеличивается на 1
    else:
        for j in range(-1, -y -1, -1): # если этаж чётный, номерация справа-налево
            house[i][j] = cnt # также счётчик продолжает мотать значения и вставлять в список
            cnt += 1
# получается до с указанным количеством этажей

# списки могут быть дохулиардмерными!!!
