from utils import randbool # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
from utils import randcell # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—â—ë —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
from utils import randcell2

# 0 - –ø–æ–ª–µ
# 1 - –¥–µ—Ä–µ–≤–æ
# 2 - —Ä–µ–∫–∞
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 - –∞–ø–≥—Ä–µ–π–¥ —à–æ–ø
# 5 - –æ–≥–æ–Ω—å

CELL_TYPES = 'üü©üå≤üåäüè•‚õ™üî•'
TREE_BONUS = 100
UPGRADE_PRICE = 500

class Map:
    
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)]
        self.generate_forest(5, 10) # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–µ—Å –ø—Ä–∏–º–µ—Ä–Ω–æ 50%
        self.generate_river(10) # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫—É –¥–ª–∏–Ω–æ–π 10
        self.generate_river(10) # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫—É –¥–ª–∏–Ω–æ–π 10
        self.generate_upgrade_shop() # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω
        
    def check_bounds(self, x, y):
        if (x < 0 or y < 0 or x >= self.h or y >= self.w):
            return False
        return True

    def print_map(self, copter):
        print('‚¨õ' * (self.w + 2)) # –≤–≤–æ–¥–∏–º —Ä–∞–º–∫—É
        for ri in range(self.h): # –≤–≤–æ–¥–∏–º –ø–æ–ª—è
            print('‚¨õ', end="") # –≤–≤–æ–¥–∏–º —Ä–∞–º–∫—É
            for ci in range(self.w): # 2 —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
                cell = self.cells[ri][ci]
                if (copter.x == ri and copter.y == ci): # –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –≤–µ—Ä—Ç–æ–ª—ë—Ç –±—É–¥–µ—Ç –∑–∞–º–µ—â–∞—Ç—å –∫–ª–µ—Ç–∫—É
                    print('üöÅ',end="")
                elif (cell >= 0 and cell < len(CELL_TYPES)):
                    print(CELL_TYPES[cell], end="")           
            print('‚¨õ') # –≤–≤–æ–¥–∏–º —Ä–∞–º–∫—É
        print('‚¨õ' * (self.w + 2))

    def generate_river(self, l): # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–∏, –≥–¥–µ l - –¥–ª–∏–Ω–∞ —Ä–µ–∫–∏
        rc = randcell(self.w, self.h) # –∑–∞–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫, –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —É—Å—Ç—å—è —Ä–µ–∫–∏
        rx, ry = rc[0], rc[1] # –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è rc, —á—Ç–æ–± –±—ã–ª–æ –ø—Ä–æ—â–µ
        if (self.check_bounds(rx, ry)):
            self.cells[rx][ry] = 2 # –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –±–µ—Ä–µ–º 2 –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–º —Å—Ç–∞–≤–∏–º —Ä–µ–∫—É
            while l > 0:
                rc2 = randcell2(rx, ry)
                rx2, ry2 = rc2[0], rc2[1]
                if (self.check_bounds(rx2, ry2)): # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–± –Ω–µ –≤—ã—à–ª–∞ –∑–∞ –ø–æ–ª–µ!
                    self.cells[rx2][ry2] = 2 # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –≤ –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è –∫–ª–µ—Ç–∫—É —Å—Ç–∞–≤–∏–º –≤–æ–¥—É
                    rx, ry = rx2, ry2 # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –∫–ª–µ—Ç–∫–∏
                    l -= 1 # —É–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É —Ä–µ–∫–∏

    def genetate_tree(self): # —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤—å–µ–≤
        c = randcell(self.w, self.h) # –≤—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–æ—á–∫–∏
        cx, cy = c[0], c[1]
        if (self.check_bounds(cx, cy) and self.cells[cx][cy] == 0): # –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–∞ –µ—ë –º–µ—Å—Ç–µ 0 (–ø–æ–ª–µ)
            self.cells[cx][cy] = 1 # —Å–∞–∂–∞–µ–º —Ç—É–¥–∞ –¥–µ—Ä–µ–≤–æ :)

    def generate_forest(self, r, mxr): # r - –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞, mxr - –æ—Ç—Å–µ—á–∫–∞(–µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–∞–Ω–¥–æ–º–∞ –≤—ã—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –æ—Ç—Å–µ–∫–∞–µ–º)
        for ri in range(self.h): # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø–æ–ª—é (map)
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1

    def generate_upgrade_shop(self):
        c = randcell(self.w, self.h) # –≤—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–æ—á–∫–∏
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4 # —Å—Ç–∞–≤–∏–º —Ç—É–¥–∞ –º–∞–≥–∞–∑–∏–Ω :)

    def add_fire(self): # –¥–æ–±–∞–≤–ª—è–µ–º –æ–≥–æ–Ω—å!
        c = randcell(self.w, self.h) # –≤—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–æ—á–∫–∏
        cx, cy = c[0], c[1]
        if (self.check_bounds(cx, cy) and self.cells[cx][cy] == 1): # –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–∞ –µ—ë –º–µ—Å—Ç–µ 1 (–¥–µ—Ä–µ–≤–æ)
            self.cells[cx][cy] = 5 # –ø–æ–º–µ—â–∞–µ–º —Ç—É–¥–∞ –æ–≥–æ–Ω—å! –∞–∞–∞

    def update_fire(self): # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–≥–æ–Ω—å!
        for ri in range(self.h):
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if cell == 5:
                    self.cells[ri][ci] = 0
        for i in range(10):
            self.add_fire()

    def process_copter(self, copter):
        c = self.cells[copter.x][copter.y] 
        if (c == 2):
            copter.tank = copter.maxtank
        if (c == 5 and copter.tank > 0):
            copter.tank -= 1
            copter.score += TREE_BONUS
            self.cells[copter.x][copter.y] = 1
        if (c == 4 and copter.score >= UPGRADE_PRICE):
            copter.maxtank += 1
            copter.score -= UPGRADE_PRICE
        
            
