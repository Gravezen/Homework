# üå≤ üü© üî• üåä üöÅ üíï ‚õ™ üè• ‚¨õ üß∫ ü•á ‚òÅÔ∏è ‚ö°

from map import Map
import time # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç–∞–π–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
import os # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É os –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
from copter import Copter as Coptero
from pynput import keyboard # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–∫—É —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from clouds import Clouds as Clouds
import json # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ—Ä–æ–±–∫—É

TICK_SLEEP = 0.1 # –∑–∞–¥–∞—ë–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏)
TREE_UPDATE = 50 # –∑–∞–¥–∞—ë–º –Ω–∞ –∫–∞–∫–æ–º –∫–∞–¥—Ä–µ –ø–æ—è–≤–∏—Ç—Å—è –¥–µ—Ä–µ–≤–æ (–∏–ª–∏ –Ω–µ—Ç, –≤–¥—Ä—É–≥ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞)
FIRE_UPDATE = 100 # –∑–∞–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥–Ω—è
CLOUD_UPDATE = 100 # –∑–∞–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤
MAP_W, MAP_H = 20, 10

clouds = Clouds(MAP_W, MAP_H)
copter = Coptero(MAP_W, MAP_H)

MOVES = {'w': (-1, 0), 'd': (0, 1), 's': (1, 0), 'a' : (0, -1)} # —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
# f - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, g - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

def on_press(key):
    global copter, tick, clouds, tmp
    c = key.char.lower() # –∫–ª—é—á —Ä–∞–≤–µ–Ω —Å–∏–º–≤–æ–ª–æ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–∞–∑—É –≤ –Ω–µ–≥–æ
    if c in MOVES.keys():
        dx, dy = MOVES[c][0], MOVES[c][1]
        copter.move(dx, dy)
    if c == 'f': # –ø–∏—à–µ–º —É—Å–ª–æ–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        data = {"copter": copter.export_data(),
                "clouds": clouds.export_data(), 
                "map": tmp.export_data(),
                "tick": tick}
        with open("level.json", "w") as lvl: # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è with –ø–æ–∑–≤–∞–ª—è–µ—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ "w" –æ–∑–Ω–∞—á–∞–µ—Ç "–ó–ê–ü–ò–°–¨"
            json.dump(data, lvl) #—Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è data, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –∑–∞–ø–∏—Å–∞—Ç—å –∏ lvl –¥–æ–∫—É–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Å—ë –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è
    elif c == 'g': # –ø–∏—à–µ–º —É—Å–ª–æ–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        with open("level.json", "r") as lvl: # –º–µ–Ω—è–µ–º w –Ω–∞ r —Ç–æ–µ—Å—Ç—å —á—Ç–µ–Ω–∏–µ!
            data = json.load(lvl)
            tick = data["tick"] or 1
            copter.import_data(data["copter"])
            tmp.import_data(data["map"])
            clouds.import_data(data["clouds"])
listener = keyboard.Listener(
    on_press=on_press,
    on_release=None)
listener.start()

tmp = Map(MAP_W, MAP_H)

# –ø–æ–∫–∞–¥—Ä–æ–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
tick = 1 # –∑–∞–¥–∞—ë–º —Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∫–∞–¥—Ä—ã

while True:
    os.system("CLS") # –∑–∞–¥–∞—ë–º –æ—Ç—á–∏—Å—Ç–∫—É —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–∏–∫–æ–º

    tmp.process_copter(copter, clouds)
    copter.print_stats()
    tmp.print_map(copter, clouds)
    print("TICK", tick)
    tick += 1
    time.sleep(TICK_SLEEP) # —É–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    if (tick % TREE_UPDATE == 0): # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–∏–∫ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –∫–∞–¥—Ä –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
        tmp.genetate_tree()
    if (tick % FIRE_UPDATE == 0):
        tmp.update_fire()
    if (tick % CLOUD_UPDATE == 0):
        clouds.update()
    